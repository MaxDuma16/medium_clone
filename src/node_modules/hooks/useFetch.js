import {useState, useEffect, useCallback} from 'react';
import axios from 'axios';

import useLocalStorage from 'hooks/useLogalStorage';

export default url => {
    const baseUrl = 'https://conduit.productionready.io/api';
    const [isLoading, setIsLoading] = useState(false);
    const [response, setResponce] = useState(null);
    const [error, setError] = useState(null);
    const [options, setOptions] = useState({});
    const [token] = useLocalStorage('token');

 const doFetch = useCallback((options = {}) => {
     setOptions(options);
     setIsLoading(true);
 }, []);

 useEffect(() => {
     let skipGetPesponseAfterDestroy = false;

     const requestOptions = {
         ...options,
         ...{
                headers: {
                    authorization: token ? `Token ${token}` : ''
                }
            }
     }
    if (!isLoading) {
        return
    }
    axios(baseUrl + url, requestOptions)
    .then(res => {
    if (!skipGetPesponseAfterDestroy) {
        setIsLoading(false);
        setResponce(res.data);
      }
    }).catch(error => {
    if (!skipGetPesponseAfterDestroy) {
        setIsLoading(false);
        setError(error.response.data);
      }
    })

    return () => {
        skipGetPesponseAfterDestroy = true;
    }

}, [isLoading, url, options, token])

 return [{isLoading, response, error}, doFetch]

}